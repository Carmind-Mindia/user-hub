// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Fonzeca/UserHub/server/domain"
	mock "github.com/stretchr/testify/mock"
)

// RolesRepository is an autogenerated mock type for the RolesRepository type
type RolesRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, name
func (_m *RolesRepository) Delete(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *RolesRepository) GetAll(ctx context.Context) ([]domain.Role, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Role
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Role); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, role
func (_m *RolesRepository) Insert(ctx context.Context, role *domain.Role) error {
	ret := _m.Called(ctx, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Role) error); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
