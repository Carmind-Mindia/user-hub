// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Carmind-Mindia/user-hub/server/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, UserName
func (_m *UserRepository) Delete(ctx context.Context, UserName string) error {
	ret := _m.Called(ctx, UserName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, UserName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *UserRepository) GetAll(ctx context.Context) ([]domain.User, error) {
	ret := _m.Called(ctx)

	var r0 []domain.User
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserName provides a mock function with given fields: ctx, userName
func (_m *UserRepository) GetByUserName(ctx context.Context, userName string) (domain.User, error) {
	ret := _m.Called(ctx, userName)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, userName)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, user
func (_m *UserRepository) Insert(ctx context.Context, user *domain.User) (domain.User, error) {
	ret := _m.Called(ctx, user)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) domain.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, user
func (_m *UserRepository) Update(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *UserRepository) GetFCMTokensByUserNames(ctx context.Context, userNames []string) ([]struct {
	FCMToken string `bson:"FCMToken"`
}, error) {

	ret := _m.Called(ctx, userNames)

	var r0 []struct {
		FCMToken string `bson:"FCMToken"`
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []struct {
		FCMToken string `bson:"FCMToken"`
	}); ok {
		r0 = rf(ctx, userNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]struct {
				FCMToken string `bson:"FCMToken"`
			})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, userNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}


